% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/segmenTools.R
\name{segmentOverlap}
\alias{segmentOverlap}
\title{Overlaps between two sets of chromosome segments}
\usage{
segmentOverlap(query, target, details = FALSE, distance, add.na = FALSE,
  untie = FALSE, collapse = FALSE, sort = FALSE, msgfile = stdout())
}
\arguments{
\item{query}{the query set of segments (genomic intervals)}

\item{target}{the target set of segments (genomic intervals)}

\item{details}{add details on the relative positions of the query
wrt the target (covers,left,inside,right); note, that  keywords 'left'
and 'right' will be converted to 'upstream' or 'downstream' by
index2coor, accounting for strand info.}

\item{distance}{not yet implemented: maximal distance for neighbor count}

\item{add.na}{add an empty overlap line for targets without overlaps}

\item{untie}{if several queries have equal top rank of 1, the rank
can be  replaced by simple order, such that only the first query
will have rank 1}

\item{collapse}{if \code{TRUE} multiple query hits are collapsed
into a single row, with ;-separated strings in the respective fields.
If both \code{add.na} and \code{collapse} are set to TRUE the resulting
overlap matrix will be of the same dimension as the input target, i.e.,
it will contain one row for each target.}

\item{sort}{sort query hits by their \code{rank}}

\item{msgfile}{file pointer for progress messages and warnings, defaults to
stdout, useful when using in context of command line pipes}
}
\description{
Simple sweeping algorithm to find overlapping intervals. Both
intervals must be in continuous index (coor2index) and start<end,
with strand information implied in the continuous index position.
see \code{bedtools} \code{intersects}, the Binary Interval
Search (BITS) algorithm, and the \code{NClist} algorithm (implemented
in packages IRanges and GenomicRanges) for similar tools.
It loops over targets and collects all queries that match, and
optionally adds NA lines for non-matched targets.
}
\details{
If \code{details==TRUE}, a column \code{qpos} will indicate the
relative position of the query to the target (e.g. `inside' means
that the query is `inside' the target, `left' means at lower
coordinates then the target). The positions `right' and `left'
can later can be converted to `upstream/downstream/etc.' by
\code{\link{index2coor}} which re-introduces strand information.
To analyze relative positions between features on distinct
strands, the target or query has to be mapped to the opposite
strand by \code{\link{switchStrand}} before passing it to
\code{segmentOverlaps}.
}
